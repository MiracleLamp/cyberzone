package main

import (
	"bytes"
	"encoding/json"
	"log"
	"net/http"
	"net/http/httptest"
	"testing"

	"golang.org/x/crypto/bcrypt"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

func TestGenerateVerificationCode(t *testing.T) {
	code := generateVerificationCode()

	// OTP –∫–æ–¥—ã —Ç”©—Ä—Ç —Ç–∞“£–±–∞–¥–∞–Ω —Ç“±—Ä—É—ã –∫–µ—Ä–µ–∫
	if len(code) != 4 {
		t.Errorf("Invalid OTP code length. Expected 4 digits, got: %d", len(code))
	}
}
func initTestDB() {
	var err error
	db, err = gorm.Open(sqlite.Open(":memory:"), &gorm.Config{})
	if err != nil {
		log.Fatalf("Failed to connect to test database: %v", err)
	}

	// –¢–µ—Å—Ç “Ø—à—ñ–Ω –∫–µ—Å—Ç–µ–ª–µ—Ä–¥—ñ –∂–∞—Å–∞—É
	db.AutoMigrate(&User{}, &TempUser{})

	// –î–µ—Ä–µ–∫—Ç–µ—Ä –±–∞–∑–∞—Å—ã–Ω —Ç–æ–ª—ã“ì—ã–º–µ–Ω —Ç–∞–∑–∞–ª–∞—É (–±–∞—Ä–ª—ã“õ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã ”©—à—ñ—Ä—É)
	db.Exec("DELETE FROM users")
	db.Exec("DELETE FROM temp_users")
}

func TestVerifyCode(t *testing.T) {
	initTestDB() // –¢–µ—Å—Ç–∫–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω SQLite –±–∞–∑–∞—Å—ã–Ω –¥–∞–π—ã–Ω–¥–∞—É

	// –¢—ñ—Ä–∫–µ–ª–≥–µ–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã –∂–∞—Å–∞—É
	tempUser := TempUser{
		Name:             "Test User",
		Email:            "testuser@example.com",
		Password:         "testpassword",
		VerificationCode: "1234",
	}
	db.Create(&tempUser)

	// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å“±—Ä–∞–Ω—ã—Å—ã–Ω –∂–∞—Å–∞—É
	requestData := map[string]string{
		"email": "testuser@example.com",
		"code":  "1234",
	}

	body, _ := json.Marshal(requestData)
	request, _ := http.NewRequest("POST", "/verify-code", bytes.NewBuffer(body))
	response := httptest.NewRecorder()

	// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏—è—Å—ã–Ω —à–∞“õ—ã—Ä—É
	verifyCode(response, request)

	// –¢–µ–∫—Å–µ—Ä—É: HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥—ã 200 –±–æ–ª—É –∫–µ—Ä–µ–∫
	if response.Code != http.StatusOK {
		t.Errorf("Expected status code 200, got: %d", response.Code)
	}

	// –î–µ—Ä–µ–∫—Ç–µ—Ä –±–∞–∑–∞—Å—ã–Ω–¥–∞ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –±–∞—Ä –º–∞, —Ç–µ–∫—Å–µ—Ä—É
	var user User
	err := db.Where("email = ?", "testuser@example.com").First(&user).Error
	if err != nil {
		t.Errorf("Verified user not found in the database")
	}
}

func TestJWTAuthentication(t *testing.T) {
    initTestDB() // –¢–µ—Å—Ç “Ø—à—ñ–Ω –¥–µ—Ä–µ–∫“õ–æ—Ä–¥—ã —Ç–∞–∑–∞–ª–∞—É

    // üîπ –¢–µ—Å—Ç–∫–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∂–∞—Å–∞—É
    password := "securepassword123"
    hashedPassword, _ := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
    user := User{
        Name:     "JWT User",
        Email:    "jwtuser@example.com",
        Password: string(hashedPassword),
        Role:     "User",
        Verified: true,
    }
    db.Create(&user)

    // üîπ –õ–æ–≥–∏–Ω —Å“±—Ä–∞–Ω—ã—Å—ã–Ω –∂–∞—Å–∞—É (OTP –∞–ª—É “Ø—à—ñ–Ω)
    credentials := map[string]string{
        "email":    "jwtuser@example.com",
        "password": password,
    }

    body, _ := json.Marshal(credentials)
    request, _ := http.NewRequest("POST", "/login", bytes.NewBuffer(body))
    response := httptest.NewRecorder()

    // üîπ –õ–æ–≥–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è—Å—ã–Ω —à–∞“õ—ã—Ä—É
    login(response, request)

    // üîπ –î–µ—Ä–µ–∫—Ç–µ—Ä –±–∞–∑–∞—Å—ã–Ω–∞–Ω –Ω–∞“õ—Ç—ã OTP –∫–æ–¥—ã–Ω –∞–ª—É
    var updatedUser User
    db.Where("email = ?", "jwtuser@example.com").First(&updatedUser)
    otp := updatedUser.OTP

    if otp == "" {
        t.Fatalf("OTP not found in database")
    }

    // üîπ OTP-–¥—ñ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è–ª–∞—É
    otpData := map[string]string{
        "email": "jwtuser@example.com",
        "otp":   otp,
    }

    otpBody, _ := json.Marshal(otpData)
    otpRequest, _ := http.NewRequest("POST", "/verify-otp", bytes.NewBuffer(otpBody))
    otpResponse := httptest.NewRecorder()

    // üîπ OTP —Ñ—É–Ω–∫—Ü–∏—è—Å—ã–Ω —Ç–µ–∫—Å–µ—Ä—É
    verifyOTP(otpResponse, otpRequest)

    // üîπ –¢–µ–∫—Å–µ—Ä—É: HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥—ã 200 –±–æ–ª—É –∫–µ—Ä–µ–∫
    if otpResponse.Code != http.StatusOK {
        t.Errorf("Expected status code 200, got: %d", otpResponse.Code)
    }

    // üîπ –ñ–∞—É–∞–ø—Ç—ã“£ —ñ—à—ñ–Ω–¥–µ JWT —Ç–æ–∫–µ–Ω –±–∞—Ä –µ–∫–µ–Ω—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É
    var verifyResponse map[string]string
    json.NewDecoder(otpResponse.Body).Decode(&verifyResponse)

    token, exists := verifyResponse["token"]
    if !exists || token == "" {
        t.Errorf("JWT token not found in response")
    }

    // üîπ –¢–æ–∫–µ–Ω–¥—ñ –≤–∞–ª–∏–¥–∞—Ü–∏—è–ª–∞—É
    parsedToken, err := validateToken(token)
    if err != nil || !parsedToken.Valid {
        t.Errorf("Invalid JWT token")
    }
}
